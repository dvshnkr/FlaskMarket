1/
use quickstart documentation from flask for base code and walkthrough / explanation
https://flask.palletsprojects.com/en/2.2.x/quickstart/

2/
to run from terminal, set environment variable FLASK_APP to name of file
for example, if name of the file is app.py, in the command prompt, run:
set FLASK_APP=app.py

following that, run:
flask run

3/
by default, debug mode is turned off in the app, so for changes to reflect in the app, the app needs to be restarted
to avoid this, set environment variable FLASK_DEBUG to 1, by running:
set FLASK_DEBUG=1

4/
to use only hard-coded routes, variables can be employed to catch routes in a defined manner, and these variables can be used in the app
for e.g., a route defined as 
@app.route("/<username>")
will accept any value in the space for username

5/
to import HTML from an external file rather than having to maintain it in the same file,
store the HTML file in a subdirectory named 'templates', and
use render_template() to load the HTML

6.a/
Use template from Bootstrap to make page prettier
https://getbootstrap.com/docs/4.5/getting-started/introduction/

6.b/
Source for navigation pane from jimdevops19's github:
https://github.com/jimdevops19/codesnippets/tree/main/Flask%20Full%20Series

7/
Use Jinja to pass information (variables) and logic from the python app to the HTML script
{{ }} to pass variables
{% %} to pass logic

8/
{{ url_for('') }}
{% block name %} {% endblock %}
{% extends '' %}

9/
pip install flask-sqlalchemy

10/
SQLAlchemy is used to create a db, where information can be stored.
Information is entered to the db from the command line, through the python interpreter:
>>> from app import db, item_class

Instantiate the db as follows (this step creates the sqlite db file in the curr dir):
>>> db.create_all()

Add items to the db
>>> item1 = item_class(col1="value", col2="value")
>>> db.session.add(item1)
>>> db.session.commit()
>>> item_class.query.all()

Override the __repr__ function in the item_class definition, if the o/p of query.all() needs to be formatted.
https://youtu.be/Qr4QMBUPxWo?t=6141

11/
Always use an app context to interact with the app

before calling db.create_all, db.session.add(), db.session.commit(), item_class.query.all(), we need to use a context manager:
with app.app_context():
	db.create_all()

and so on...

12/
Items stored in db are persistent, they will remain after the python interpreter has been closed.

